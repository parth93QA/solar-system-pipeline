name: Solar System Workflow
on: 
    workflow_dispatch: 
    push:
        branches: 
            - main
            - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        strategy:
          matrix:
             operating_system: [ubuntu-latest]
             nodejs_version: [18, 19, 20]
             exclude:
               - nodejs_version: [18,20]
                 operating_system: macos-latest
              
        runs-on: ${{ matrix.operating_system }}
        services:
          mongo-db: 
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodejs_version }}
            
            - name: Composite Action - Cache Install NPM packages
              uses: .github/workflows/custom-actions/npm-actions
              with:
                path-of-folder: node_modules 
            
            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test
            
            - name: Archive Test Results
              # if: failure() && (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success')
              if: always()
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: test-results.xml 

    code-coverage:
        name: Code Coverage
        container: 
          image: node:18
        runs-on: ubuntu-latest
        services:
          mongo-db: 
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          # - name: Setup NodeJS Version - 18
          #   uses: actions/setup-node@v3
          #   with:
          #     node-version: 18
          
          # - name: Cache NPM dependencies
          #   uses: actions/cache@v3
          #   with:
          #       path: node_modules
          #       key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}    

          # - name: Install Dependencies
          #   run: npm install

          - name: Composite Action - Cache Install NPM packages
            uses: .github/workflows/custom-actions/npm-actions
            with:
              path-of-folder: node_modules 

          - name: Check Code Coverage
            continue-on-error: true
            run: npm run coverage

          - name: Archive Test Result
            uses: actions/upload-artifact@v3
            with:
              name: Code-Coverage-Result
              path: coverage
              retention-days: 5
    
    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      permissions: 
        packages: write
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Docker Login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        
        - name: GHCR Login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build For Testing
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
    
        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live
        
        - name: Push Docker Image to Docker and GHCR
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/parth93qa/solar-system:${{ github.sha }}


    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: [docker]
      environment: 
        name: development 
        url: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        
        - name: Set KubeConfig
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
            

        - name: Check Version
          run: |
              kubectl version --short 
              echo -----------------------------
              kubectl get nodes
        
        - name: Save Nginx Ingress Controller IP as a Github Env Variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV


        - name: Replace Tokens in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '${'
            tokenSuffix: '}'
            files: '[kubernetes/development/*.yaml]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        
        - name: Check Files
          run: |

             cat kubernetes/deploments/*.yaml

        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }}\
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f .
        
        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development
        
        - name: Set Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")"
          

    dev-integration-testing:
       if: contains(github.ref, 'feature/')
       name: Dev Integration Testing
       needs: dev-deploy
       runs-on: ubuntu-latest
       steps:
        - name: Test URL Output using Curl and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo ${{ env.URL }}
            echo "-------------------------------"
            curl https://${{ env.URL }}/live -s -k | jq -r .status | grep -i live



    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: [docker]
      environment: 
          name: production 
          url: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      outputs:
          APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
                  
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
                
        - name: Set KubeConfig
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
                    
        
        - name: Check Version
          run: |
              kubectl version --short 
              echo -----------------------------
              kubectl get nodes
                
        - name: Save Nginx Ingress Controller IP as a Github Env Variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV
        
        
        - name: Replace Tokens in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '${'
            tokenSuffix: '}'
            files: '[kubernetes/production/*.yaml]'
          env:
                NAMESPACE: ${{ vars.NAMESPACE }}
                REPLICAS: ${{ vars.REPLICAS }}
                IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                INGRESS_IP: ${{ env.INGRESS_IP }}
                
        - name: Check Files
          run: |
            cat kubernetes/production/*.yaml
        
        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }}\
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f .
                
        - name: Deploy to PROD Env
          run: |
            kubectl apply -f kubernetes/production
                
        - name: Set Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")"
                  
        
    prod-integration-testing:
               name: PROD Integration Testing
               needs: prod-deploy
               runs-on: ubuntu-latest
               steps:
                - name: Test URL Output using Curl and JQ
                  env:
                    URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
                  run: |
                    echo ${{ env.URL }}
                    echo "-------------------------------"
                    curl https://${{ env.URL }}/live -s -k | jq -r .status | grep -i live